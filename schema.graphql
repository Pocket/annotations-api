
"""
Integer based represention of a unix timestamp
"""
scalar Timestamp


extend type SavedItem @key(fields: "id") {
  id: ID! @external
  """
  Annotations associated to this SavedItem
  """
  annotations: SavedItemAnnotations
}

"""
Container for all annotations associated to a SavedItem.
Can be extended when more types of annotations are added.
"""
type SavedItemAnnotations {
  """
  User-highlighted passages on a SavedItem
  """
  highlights: [Highlight]
}

"""
A User-highlighted passage on a SavedItem
"""
type Highlight {
  """
  The ID for this Highlight annotation
  """
  id: ID!
  
  """
  The full text of the highlighted passage. Used as a fallback for
  rendering highlight if the patch fails.
  """
  quote: String!
  
  """
  Patch string generated by 'DiffMatchPatch' library, serialized
  into text via `patch_toText` method. Use `patch_fromText` to 
  deserialize into an object that can be used by the DiffMatchPatch
  library. Format is similar to UniDiff but is character-based.
  The patched text depends on version. For example, the version 2
  patch surrounds the highlighted text portion with a pair of 
  sentinel tags: '<pkt_tag_annotation></pkt_tag_annotation>'
  Reference: https://github.com/google/diff-match-patch
  """
  patch: String!
 
  """
  Version number for highlight data specification
  """
  version: Int!
  
  """
  When the Highlight was created
  """
  _createdAt: Timestamp!
  
  """
  When the highlight was last updated
  """
  _updatedAt: Timestamp!
}

extend type User @key(fields: "id") {
  #Note more properties exist here but are defined in another service.

  """
  User id, provided by the user service.
  """
  id: ID! @external
}

"""
Input for creating a new User-highlighted passage on a SavedItem.
"""
input CreateHighlightInput {
  """
  The full text of the highlighted passage. Used as a fallback for
  rendering highlight if the patch fails.
  """
  quote: String!
  
  """
  Patch string generated by 'DiffMatchPatch' library, serialized
  into text via `patch_toText` method. 
  Format is similar to UniDiff but is character-based.
  The patched text depends on version. For example, the version 2
  patch surrounds the highlighted text portion with a pair of 
  sentinel tags: '<pkt_tag_annotation></pkt_tag_annotation>'
  Reference: https://github.com/google/diff-match-patch
  """
  patch: String!
 
  """
  Annotation data version
  """
  version: Int!
 
  """
  The ID of the Item that should be annotated in the User's list
  """
  itemId: ID! 
}


type Mutation {

  """
  Create new highlight annotation(s). Returns the data for the created Highlight object(s).
  """
  createSavedItemHighlights(input: [CreateHighlightInput!]!): [Highlight!]!

  """
  Update an existing highlight annotation, by its ID.
  If the given highlight ID does not exist, will return error data
  and the highlight will not be created.
  """
  updateSavedItemHighlight(id: ID!, input: CreateHighlightInput!): Highlight!
  
  """
  Delete a highlight by its ID.
  """
  deleteSavedItemHighlight(id: ID!): ID!
}
