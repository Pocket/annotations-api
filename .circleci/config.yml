version: 2.1

orbs:
  aws-ecs: circleci/aws-ecs@2.2.1
  pocket: pocket/circleci-orbs@1.2.5
  aws-cli: circleci/aws-cli@1.2.1

# Workflow shortcuts
# You can remove unnecessary shortcuts as applicable
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  apollo:
    docker:
      - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
    steps:
      - checkout
      - run:
          name: install rover
          command: |
            # download and install Rover
            curl -sSL https://rover.apollo.dev/nix/v0.1.0 | sh

            # This allows the PATH changes to persist to the next `run` step
            echo 'export PATH=$HOME/.rover/bin:$PATH' >> $BASH_ENV
      - run:
          name: check service
          command: rover subgraph check pocket-client-api@current --schema ./schema.graphql --name=annotations
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service to prod
                command: rover subgraph publish pocket-client-api@current --schema ./schema.graphql --routing-url https://annotations-api.readitlater.com/ --name=annotations
      - when:
          condition:
            equal: [dev, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service to dev
                command: rover subgraph publish pocket-client-api@development --schema ./schema.graphql --routing-url https://annotations-api.getpocket.dev/ --name=annotations
  build:
    docker:
      - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
    steps:
      - checkout
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      # Add user to npmrc
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: install node modules
          command: npm ci
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name:
          command: |
            export NODE_ENV=production
            npm run build
      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r ./node_modules package.json Dockerfile schema.graphql ./dist /tmp/workspace/app_prod
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

  test_integrations:
    description: Run integration tests against external services, e.g. MySQL
    docker:
      # The application
      - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          - NODE_ENV=test
          - AWS_XRAY_LOG_LEVEL=silent
          - AWS_XRAY_CONTEXT_MISSING=LOG_ERROR
      # Mysql 5.6 service
      - image: mysql:5.6@sha256:20575ecebe6216036d25dab5903808211f1e9ba63dc7825ac20cb975e34cfcae
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          TZ: 'UTC'
      # localstack
      - image: localstack/localstack@sha256:693ed9f6e1d168c89309b103945466e93d58cd789ef233fcaa5dd1553ab9a9b0
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          DEBUG: 1
          SERVICES: dynamodb
          DATA_DIR: /tmp/localstack/data
          EXTRA_CORS_ALLOWED_HEADERS: Content-Disposition, Content-Type, x-amz-acl
          EXTRA_CORS_EXPOSE_HEADERS: ETag
          HOSTNAME_EXTERNAL: localstack
    steps:
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: install node modules
          command: npm ci
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: run setup.sh
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --db --aws
      - run:
          name: run tests
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0)
            npm run test-integrations  -- --ci --watchAll=false --forceExit

  test_specs:
    description: Run spec tests
    docker:
      - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          - NODE_ENV=test
          - AWS_XRAY_LOG_LEVEL=silent
          - AWS_XRAY_CONTEXT_MISSING=LOG_ERROR
    steps:
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      - run:
          name: install node modules
          command: npm ci
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: run tests
          command: npm run test
  lambda:
    description: Builds and Optionaly deploys all the associated lambdas
    parameters:
      env_lower_name:
        type: string
        description: The lower case env name
      env_capital_name:
        default: Env Name
        description: The env capital name
        type: string
      deploy:
        type: boolean
        default: true
    docker:
      - image: circleci/node:14@sha256:6f6b36595d00d61545f502d191c459a52e8f3d55a3607f4e2e2dd8f15a01c9ad
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Package Lambda
          command: |
            cd lambda
            npm ci --production
            npm run build
            cp -r package.json package-lock.json dist/
            cp -r node_modules/ dist/node_modules/
            cd dist
            zip -r9 "/tmp/$CIRCLE_SHA1.zip" *
            mkdir -p /tmp
            cp "/tmp/$CIRCLE_SHA1.zip" /tmp/build.zip
      - when:
          condition: << parameters.deploy >>
          steps:
            - aws-cli/setup:
                aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
                aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
            - run:
                name: Upload Package
                command: aws s3 cp "/tmp/$CIRCLE_SHA1.zip" s3://pocket-annotationsapi-<< parameters.env_lower_name >>-sqs-event-consumer/
            - pocket/deploy_lambda:
                s3-bucket: pocket-annotationsapi-<< parameters.env_lower_name >>-sqs-event-consumer
                aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
                aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
                codedeploy-application-name: AnnotationsAPI-<< parameters.env_capital_name >>-Sqs-Event-Consumer-Lambda
                codedeploy-deployment-group-name: AnnotationsAPI-<< parameters.env_capital_name >>-Sqs-Event-Consumer-Lambda
                function-name: AnnotationsAPI-<< parameters.env_capital_name >>-Sqs-Event-Consumer-Function

      - store_artifacts:
          path: /tmp/build.zip

workflows:
  all:
    jobs:
      - test_specs:
          <<: *not_main
          context: pocket
          name: test_specs

      - test_integrations:
          <<: *not_main
          context: pocket
          name: test_integrations

      # Try building the lambda on each branch
      - lambda:
          <<: *not_dev_main
          context: pocket
          name: build_lambda
          env_lower_name: prod
          env_capital_name: Prod
          deploy: false

      # Build & Deploy Development Lambdas
      - lambda:
          <<: *only_dev
          context: pocket
          name: deploy_lambdas_dev
          env_lower_name: dev
          env_capital_name: Dev
          deploy: true
          requires:
            - deploy_dev

      # Build & Deploy Production Lambdas
      - lambda:
          <<: *only_main
          context: pocket
          name: deploy_lambdas_prod
          env_lower_name: prod
          env_capital_name: Prod
          deploy: true
          requires:
            - deploy_prod

      - apollo

      - build:
          context: pocket

      # Try building the ECS docker image on each branch
      - pocket/docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          repo-name: ${SERVICE_NAME_LOWER}-dev-app
          ecr-url: ${ACCOUNT_ID_DEV}.dkr.ecr.us-east-1.amazonaws.com
          push: false
          requires:
            - build

      # Build & Deploy the Dev Docker Image
      - pocket/docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codebuild-project-name: ${SERVICE_NAME}-Dev
          codebuild-project-branch: dev
          repo-name: ${SERVICE_NAME_LOWER}-dev-app
          ecr-url: ${ACCOUNT_ID_DEV}.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: ${SERVICE_NAME}-Dev-CodePipeline
          codebuild-project-name: ${SERVICE_NAME}-Dev
          codebuild-project-branch: dev
          requires:
            - build_docker_dev

      # Build & Deploy the Prod Docker Image
      - pocket/docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codebuild-project-name: ${SERVICE_NAME}-Prod
          codebuild-project-branch: main
          repo-name: ${SERVICE_NAME_LOWER}-prod-app
          ecr-url: ${ACCOUNT_ID_PROD}.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Prod
      - pocket/execute_codepipeline:
          <<: *only_main
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: ${SERVICE_NAME}-Prod-CodePipeline
          codebuild-project-name: ${SERVICE_NAME}-Prod
          codebuild-project-branch: main
          requires:
            - build_docker_prod

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ${SERVICE_NAME}

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}
      # TODO: Understand why these keep failing
      # # Notify sentry of main deployment
      # - pocket/sentry_release_notification:
      #     <<: *only_main
      #     name: sentry-release-notification-prod
      #     context: pocket
      #     repository_name: Pocket/${CONSTRUCT_NAME}
      #     sentry_project_name: ${CONSTRUCT_NAME}
      #     sentry_env: production
      #     sentry_org: pocket
      #     workspace-path: /tmp/workspace
      #     requires:
      #       - deploy_prod

      # # Notify sentry of dev deployment
      # - pocket/sentry_release_notification:
      #     <<: *only_dev
      #     name: sentry-release-notification-dev
      #     context: pocket
      #     repository_name: Pocket/${CONSTRUCT_NAME}
      #     sentry_project_name: ${CONSTRUCT_NAME}
      #     sentry_env: development
      #     sentry_org: pocket
      #     workspace-path: /tmp/workspace
      #     requires:
      #       - deploy_dev
